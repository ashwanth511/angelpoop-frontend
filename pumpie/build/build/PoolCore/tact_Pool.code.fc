#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(slice, cell) $Pool$_contract_init() impure inline_ref {
    var (($self'owner, $self'pools)) = (null(), null());
    $self'owner = __tact_context_get_sender();
    $self'pools = null();
    return ($self'owner, $self'pools);
}

((slice, cell), int) $Pool$_fun_getJettonLiquidity((slice, cell) $self, slice $jettonAddress) impure inline_ref {
    var (($self'owner, $self'pools)) = $self;
    tuple $pool = $JettonPool$_load_opt(__tact_dict_get_slice_cell($self'pools, 267, $jettonAddress));
    throw_unless(15093, ( ((~ null?($pool))) ? ($JettonPool$_get_isActive($JettonPool$_not_null($pool))) : (false) ));
    var $fresh$ret_0 = $JettonPool$_get_balance($JettonPool$_not_null($pool));
    return (($self'owner, $self'pools), $fresh$ret_0);
}

((slice, cell), int) $Pool$_fun_hasPool((slice, cell) $self, slice $jettonAddress) impure inline_ref {
    var (($self'owner, $self'pools)) = $self;
    tuple $pool = $JettonPool$_load_opt(__tact_dict_get_slice_cell($self'pools, 267, $jettonAddress));
    var $fresh$ret_1 = ( ((~ null?($pool))) ? ($JettonPool$_get_isActive($JettonPool$_not_null($pool))) : (false) );
    return (($self'owner, $self'pools), $fresh$ret_1);
}

((slice, cell), slice) $Pool$_fun_owner((slice, cell) $self) impure inline_ref {
    var (($self'owner, $self'pools)) = $self;
    var $fresh$ret_2 = $self'owner;
    return (($self'owner, $self'pools), $fresh$ret_2);
}

;;
;; Receivers of a Contract Pool
;;

(((slice, cell)), ()) $Pool$_internal_binary_AddJetton((slice, cell) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'pools) = $self;
    var ($msg'jettonAddress) = $msg;
    throw_unless(45732, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    tuple $currentPool = $JettonPool$_load_opt(__tact_dict_get_slice_cell($self'pools, 267, $msg'jettonAddress));
    if ((~ null?($currentPool))) {
        throw_unless(5530, (~ $JettonPool$_get_isActive($JettonPool$_not_null($currentPool))));
    }
    $self'pools~__tact_dict_set_slice_cell(267, $msg'jettonAddress, $JettonPool$_store_cell($JettonPool$_constructor_balance_isActive(0, true)));
    return (($self'owner, $self'pools), ());
}

(((slice, cell)), ()) $Pool$_internal_binary_PoolBuy((slice, cell) $self, (slice, int) $msg) impure inline {
    var ($self'owner, $self'pools) = $self;
    var ($msg'jettonAddress, $msg'amount) = $msg;
    tuple $pool = $JettonPool$_load_opt(__tact_dict_get_slice_cell($self'pools, 267, $msg'jettonAddress));
    throw_unless(15093, ( ((~ null?($pool))) ? ($JettonPool$_get_isActive($JettonPool$_not_null($pool))) : (false) ));
    $self'pools~__tact_dict_set_slice_cell(267, $msg'jettonAddress, $JettonPool$_store_cell($JettonPool$_constructor_balance_isActive(($JettonPool$_get_balance($JettonPool$_not_null($pool)) + $msg'amount), true)));
    return (($self'owner, $self'pools), ());
}

(((slice, cell)), ()) $Pool$_internal_binary_PoolSell((slice, cell) $self, (slice, slice, int) $msg) impure inline {
    var ($self'owner, $self'pools) = $self;
    var ($msg'jettonAddress, $msg'to, $msg'amount) = $msg;
    tuple $pool = $JettonPool$_load_opt(__tact_dict_get_slice_cell($self'pools, 267, $msg'jettonAddress));
    throw_unless(15093, ( ((~ null?($pool))) ? ($JettonPool$_get_isActive($JettonPool$_not_null($pool))) : (false) ));
    throw_unless(1783, ($msg'amount <= $JettonPool$_get_balance($JettonPool$_not_null($pool))));
    $global_send($SendParameters$_constructor_to_value_bounce($msg'to, $msg'amount, true));
    $self'pools~__tact_dict_set_slice_cell(267, $msg'jettonAddress, $JettonPool$_store_cell($JettonPool$_constructor_balance_isActive(($JettonPool$_get_balance($JettonPool$_not_null($pool)) - $msg'amount), true)));
    return (($self'owner, $self'pools), ());
}

(((slice, cell)), ()) $Pool$_internal_binary_Deploy((slice, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'pools) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'pools)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'pools), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %getJettonLiquidity(slice $jettonAddress) method_id(66105) {
    slice $jettonAddress = __tact_verify_address($jettonAddress);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_getJettonLiquidity($jettonAddress);
    return res;
}

_ %hasPool(slice $jettonAddress) method_id(113924) {
    slice $jettonAddress = __tact_verify_address($jettonAddress);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_hasPool($jettonAddress);
    return res;
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((slice, cell), int) $Pool$_contract_router_internal((slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AddJetton message
    if (op == 1824497237) {
        var msg = in_msg~$AddJetton$_load();
        self~$Pool$_internal_binary_AddJetton(msg);
        return (self, true);
    }
    
    ;; Receive PoolBuy message
    if (op == 350941107) {
        var msg = in_msg~$PoolBuy$_load();
        self~$Pool$_internal_binary_PoolBuy(msg);
        return (self, true);
    }
    
    ;; Receive PoolSell message
    if (op == 2040629039) {
        var msg = in_msg~$PoolSell$_load();
        self~$Pool$_internal_binary_PoolSell(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
