;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce(slice $to, int $value, int $bounce) inline {
    return ($bounce, $to, $value, 0, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: PoolBuy
;; Header: 0x14eaefb3
;; TLB: pool_buy#14eaefb3 jettonAddress:address amount:coins = PoolBuy
;;

(slice, ((slice, int))) $PoolBuy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 350941107);
    var v'jettonAddress = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'jettonAddress, v'amount));
}

;;
;; Type: PoolSell
;; Header: 0x79a1872f
;; TLB: pool_sell#79a1872f jettonAddress:address to:address amount:coins = PoolSell
;;

(slice, ((slice, slice, int))) $PoolSell$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2040629039);
    var v'jettonAddress = sc_0~__tact_load_address();
    var v'to = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'jettonAddress, v'to, v'amount));
}

;;
;; Type: AddJetton
;; Header: 0x6cbf9e55
;; TLB: add_jetton#6cbf9e55 jettonAddress:address = AddJetton
;;

(slice, ((slice))) $AddJetton$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1824497237);
    var v'jettonAddress = sc_0~__tact_load_address();
    return (sc_0, (v'jettonAddress));
}

;;
;; Type: JettonPool
;; TLB: _ balance:coins isActive:bool = JettonPool
;;

builder $JettonPool$_store(builder build_0, (int, int) v) inline {
    var (v'balance, v'isActive) = v;
    build_0 = build_0.store_coins(v'balance);
    build_0 = build_0.store_int(v'isActive, 1);
    return build_0;
}

cell $JettonPool$_store_cell((int, int) v) inline {
    return $JettonPool$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $JettonPool$_load(slice sc_0) inline {
    var v'balance = sc_0~load_coins();
    var v'isActive = sc_0~load_int(1);
    return (sc_0, (v'balance, v'isActive));
}

tuple $JettonPool$_as_optional((int, int) v) inline {
    var (v'balance, v'isActive) = v;
    return __tact_tuple_create_2(v'balance, v'isActive);
}

tuple $JettonPool$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $JettonPool$_as_optional(sc~$JettonPool$_load());
}

_ $JettonPool$_get_balance((int, int) v) inline {
    var (v'balance, v'isActive) = v;
    return v'balance;
}

_ $JettonPool$_get_isActive((int, int) v) inline {
    var (v'balance, v'isActive) = v;
    return v'isActive;
}

((int, int)) $JettonPool$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'balance, int vvv'isActive) = __tact_tuple_destroy_2(v);
    return (vvv'balance, vvv'isActive);
}

((int, int)) $JettonPool$_constructor_balance_isActive(int $balance, int $isActive) inline {
    return ($balance, $isActive);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (slice, cell) v) inline {
    var (v'owner, v'pools) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_dict(v'pools);
    return build_0;
}

(slice, ((slice, cell))) $Pool$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'pools = sc_0~load_dict();
    return (sc_0, (v'owner, v'pools));
}

(slice, cell) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Pool$_contract_init();
    }
}

() $Pool$_contract_store((slice, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}