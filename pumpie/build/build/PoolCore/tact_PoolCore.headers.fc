;;
;; Header files for PoolCore
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $BuyTokens$_store
builder $BuyTokens$_store(builder build_0, (slice, int) v) inline;

;; $BuyTokens$_store_cell
cell $BuyTokens$_store_cell((slice, int) v) inline;

;; $SellTokens$_store
builder $SellTokens$_store(builder build_0, (slice, int) v) inline;

;; $SellTokens$_store_cell
cell $SellTokens$_store_cell((slice, int) v) inline;

;; $PoolBuy$_load
(slice, ((slice))) $PoolBuy$_load(slice sc_0) inline;

;; $PoolSell$_load
(slice, ((slice, slice, int))) $PoolSell$_load(slice sc_0) inline;

;; $AddJetton$_load
(slice, ((slice))) $AddJetton$_load(slice sc_0) inline;

;; $BurnNotificationWithTon$_load
(slice, ((int, int, slice))) $BurnNotificationWithTon$_load(slice sc_0) inline;

;; $WithdrawFromPool$_load
(slice, ((slice, int))) $WithdrawFromPool$_load(slice sc_0) inline;

;; $JettonPool$_store
builder $JettonPool$_store(builder build_0, (int, int) v) inline;

;; $JettonPool$_store_cell
cell $JettonPool$_store_cell((int, int) v) inline;

;; $JettonPool$_load
(slice, ((int, int))) $JettonPool$_load(slice sc_0) inline;

;; $JettonPool$_as_optional
tuple $JettonPool$_as_optional((int, int) v) inline;

;; $JettonPool$_load_opt
tuple $JettonPool$_load_opt(cell cl) inline;

;; $PendingSell$_store
builder $PendingSell$_store(builder build_0, (slice, slice, int) v) inline;

;; $PendingSell$_store_cell
cell $PendingSell$_store_cell((slice, slice, int) v) inline;

;; $PendingSell$_not_null
((slice, slice, int)) $PendingSell$_not_null(tuple v) inline;

;; $PendingSell$_store_opt
cell $PendingSell$_store_opt(tuple v) inline;

;; $PendingSell$_load
(slice, ((slice, slice, int))) $PendingSell$_load(slice sc_0) inline;

;; $PendingSell$_as_optional
tuple $PendingSell$_as_optional((slice, slice, int) v) inline;

;; $PendingSell$_load_opt
tuple $PendingSell$_load_opt(cell cl) inline;

;; $WalletDataMessage$_load
(slice, ((int, slice, slice, cell))) $WalletDataMessage$_load(slice sc_0) inline;

;; $DeployJetton$_load
(slice, ((slice, cell, int, int, int, slice))) $DeployJetton$_load(slice sc_0) inline_ref;

;; $PoolCore$_store
builder $PoolCore$_store(builder build_0, (slice, cell, cell) v) inline;

;; $PoolCore$_load
(slice, ((slice, cell, cell))) $PoolCore$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $JettonPool$_get_balance
_ $JettonPool$_get_balance((int, int) v) inline;

;; $JettonPool$_get_isActive
_ $JettonPool$_get_isActive((int, int) v) inline;

;; $JettonPool$_not_null
((int, int)) $JettonPool$_not_null(tuple v) inline;

;; $PendingSell$_get_amount
_ $PendingSell$_get_amount((slice, slice, int) v) inline;

;; $JettonCore$init$_store
builder $JettonCore$init$_store(builder build_0, (slice, cell, int, int, int, slice) v) inline;

;; $PoolCore$_contract_init
(slice, cell, cell) $PoolCore$_contract_init() impure inline_ref;

;; $PoolCore$_contract_load
(slice, cell, cell) $PoolCore$_contract_load() impure inline_ref;

;; $PoolCore$_contract_store
() $PoolCore$_contract_store((slice, cell, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; __tact_load_address$not_mut
slice __tact_load_address$not_mut(slice $self) impure inline_ref;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $JettonCore$_init_child
(cell, cell) $JettonCore$_init_child(cell sys', slice $owner, cell $content, int $max_supply, int $token_price, int $initial_mint, slice $pool) inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $SendParameters$_constructor_to_value_bounce_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice $to, int $value, int $bounce, int $mode) inline;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $SendParameters$_constructor_to_value_body_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body_mode(slice $to, int $value, cell $body, int $mode) inline;

;; $SellTokens$_constructor_resAddress_tokenAmount
((slice, int)) $SellTokens$_constructor_resAddress_tokenAmount(slice $resAddress, int $tokenAmount) inline;

;; $JettonPool$_constructor_balance_isActive
((int, int)) $JettonPool$_constructor_balance_isActive(int $balance, int $isActive) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $PoolCore$_fun__processSell
((slice, cell, cell), ()) $PoolCore$_fun__processSell((slice, cell, cell) $self, (slice, slice, int) $sell) impure inline_ref;

;; $PoolCore$_fun_getJettonInit
((slice, cell, cell), (cell, cell)) $PoolCore$_fun_getJettonInit((slice, cell, cell) $self, slice $owner, cell $content, int $max_supply, int $token_price, int $initial_mint, slice $pool) impure inline_ref;

;; $PoolCore$_fun_getJettonLiquidity
((slice, cell, cell), int) $PoolCore$_fun_getJettonLiquidity((slice, cell, cell) $self, slice $jettonAddress) impure inline_ref;

;; $PoolCore$_fun_hasPool
((slice, cell, cell), int) $PoolCore$_fun_hasPool((slice, cell, cell) $self, slice $jettonAddress) impure inline_ref;

;; $PoolCore$_fun_getJettonAddress
((slice, cell, cell), slice) $PoolCore$_fun_getJettonAddress((slice, cell, cell) $self, slice $owner) impure inline_ref;

;; $PoolCore$_fun_forward
((slice, cell, cell), ()) $PoolCore$_fun_forward((slice, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $PoolCore$_fun_notify
((slice, cell, cell), ()) $PoolCore$_fun_notify((slice, cell, cell) $self, cell $body) impure inline;

;; $PoolCore$_fun_owner
((slice, cell, cell), slice) $PoolCore$_fun_owner((slice, cell, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_body_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body_mode(slice $to, int $value, int $bounce, cell $body, int $mode) inline;

;; $BuyTokens$_constructor_resAddress_tonAmount
((slice, int)) $BuyTokens$_constructor_resAddress_tonAmount(slice $resAddress, int $tonAmount) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_code_data(slice $to, int $value, int $bounce, int $mode, cell $code, cell $data) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
