#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_JettonCore.headers.fc";
#include "tact_JettonCore.stdlib.fc";
#include "tact_JettonCore.constants.fc";
#include "tact_JettonCore.storage.fc";

;;
;; Contract JettonCore functions
;;

((int, slice, cell, int, int, int, int, int, int, slice), (cell, cell)) $JettonCore$_fun_calculate_jetton_wallet_init((int, slice, cell, int, int, int, int, int, int, slice) $self, slice $owner_address) impure inline {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var $fresh$ret_0 = $JettonWalletImp$_init_child(__tact_context_sys, $owner_address, $global_myAddress());
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_0);
}

((int, slice, cell, int, int, int, int, int, int, slice), ()) $JettonCore$_fun__mint((int, slice, cell, int, int, int, int, int, int, slice) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice) $msg) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload)) = $msg;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_calculate_jetton_wallet_init($msg'receiver);
    $self'total_supply = ($self'total_supply + $msg'amount);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body_code_data($global_contractAddress(($initCode'code, $initCode'data)), 0, true, 64, $JettonInternalTransfer$_store_cell($JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload(0, $msg'amount, $msg'origin, $global_myAddress(), $msg'forward_ton_amount, $msg'forward_payload)), $initCode'code, $initCode'data));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(int, slice, cell, int, int, int, int, int, int, slice) $JettonCore$_contract_init(slice $owner, cell $content, int $max_supply, int $token_price, int $initial_mint, slice $pool) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null());
    throw_unless(50816, ($max_supply > 0));
    throw_unless(58866, ($token_price > 0));
    throw_unless(54531, ( (($initial_mint >= 0)) ? (($initial_mint <= $max_supply)) : (false) ));
    $self'total_supply = 0;
    $self'owner = $owner;
    $self'mintable = true;
    $self'jetton_content = $content;
    $self'max_supply = $max_supply;
    $self'initial_token_price = $token_price;
    $self'curve_steepness = 1;
    $self'base_amount = 1000000000;
    $self'pool = $pool;
    $self'initial_mint_amount = $initial_mint;
    if (($initial_mint > 0)) {
        ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__mint(__tact_context_get(), $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload($owner, $owner, $initial_mint, null(), 0, $global_emptySlice()));
    }
    return ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool);
}

((int, slice, cell, int, int, int, int, int, int, slice), ()) $JettonCore$_fun__mint_validate((int, slice, cell, int, int, int, int, int, int, slice) $self, (int, slice, int, slice) $ctx, (slice, slice, int, cell, int, slice) $msg) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload)) = $msg;
    throw_unless(57579, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    throw_unless(26288, $self'mintable);
    throw_unless(27544, ($msg'amount > 0));
    throw_unless(14796, (($self'total_supply + $msg'amount) <= $self'max_supply));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

((int, slice, cell, int, int, int, int, int, int, slice), ()) $JettonCore$_fun__burn_notification_validate((int, slice, cell, int, int, int, int, int, int, slice) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination)) = $msg;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_calculate_jetton_wallet_init($msg'sender);
    int $isValidWallet = ( __tact_slice_eq_bits($global_contractAddress(($initCode'code, $initCode'data)), $ctx'sender) );
    throw_unless(61350, ( (( __tact_slice_eq_bits($self'pool, $ctx'sender) )) ? (true) : ($isValidWallet) ));
    throw_unless(40476, ($msg'amount > 0));
    throw_unless(13824, ($self'total_supply >= $msg'amount));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_fun_getCurrentPrice((int, slice, cell, int, int, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    int $supply_ratio = (($self'total_supply * 1000000000) / $self'base_amount);
    int $base_multiplier = (1000000000 + $supply_ratio);
    int $result = $self'initial_token_price;
    repeat ($self'curve_steepness) {
        $result = (($result * $base_multiplier) / 1000000000);
    }
    var $fresh$ret_3 = $result;
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_3);
}

((int, slice, cell, int, int, int, int, int, int, slice), ()) $JettonCore$_fun__burn_notification((int, slice, cell, int, int, int, int, int, int, slice) $self, (int, slice, int, slice) $ctx, (int, int, slice, slice) $msg) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination)) = $msg;
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__burn_notification_validate(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination));
    $self'total_supply = ($self'total_supply - $msg'amount);
    int $price = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_getCurrentPrice();
    int $tonAmount = (($msg'amount * $price) / 1000000000);
    int $msgValue = $global_min($Context$_get_value(__tact_context_get()), 100000000);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($self'pool, $msgValue, true, 2, $BurnNotificationWithTon$_store_cell($BurnNotificationWithTon$_constructor_amount_tokenAmount_user($tonAmount, $msg'amount, $msg'response_destination))));
    if ((($Context$_get_value(__tact_context_get()) - $msgValue) > 0)) {
        $global_send($SendParameters$_constructor_to_value_bounce_mode($msg'response_destination, ($Context$_get_value(__tact_context_get()) - $msgValue), false, 2));
    }
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_fun_getPriceForAmount((int, slice, cell, int, int, int, int, int, int, slice) $self, int $purchase_amount) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    throw_unless(29951, ($purchase_amount > 0));
    throw_unless(58297, (($self'total_supply + $purchase_amount) <= $self'max_supply));
    int $supply_ratio = (($purchase_amount * 1000000000) / $self'base_amount);
    int $base_multiplier = (1000000000 + $supply_ratio);
    int $result = $self'initial_token_price;
    repeat ($self'curve_steepness) {
        $result = (($result * $base_multiplier) / 1000000000);
    }
    var $fresh$ret_1 = $result;
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_1);
}

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_fun_getTotalCostForAmount((int, slice, cell, int, int, int, int, int, int, slice) $self, int $purchase_amount) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    throw_unless(29951, ($purchase_amount > 0));
    throw_unless(58297, (($self'total_supply + $purchase_amount) <= $self'max_supply));
    int $price = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_getPriceForAmount($purchase_amount);
    var $fresh$ret_2 = ($price * $purchase_amount);
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_2);
}

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_fun_getCurrentPrice2((int, slice, cell, int, int, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    if (( (($self'base_amount == 0)) ? (true) : (($self'total_supply == 0)) )) {
        throw(101);
    }
    int $supply_ratio = (($self'total_supply * 1000000000) / $self'base_amount);
    int $base_multiplier = (1000000000 + $supply_ratio);
    int $result = $self'initial_token_price;
    if (( (($self'curve_steepness <= 0)) ? (true) : (($self'curve_steepness > 100)) )) {
        throw(101);
    }
    repeat ($self'curve_steepness) {
        $result = (($result * $base_multiplier) / 1000000000);
        if (($result <= 0)) {
            throw(101);
        }
    }
    var $fresh$ret_4 = $result;
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_4);
}

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_fun_getTotalSupplyInCoins((int, slice, cell, int, int, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    int $total_supply_in_coins = ($self'total_supply / 1000000000);
    var $fresh$ret_5 = $total_supply_in_coins;
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_5);
}

((int, slice, cell, int, int, int, int, int, int, slice), (int, int, slice, cell, cell)) $JettonCore$_fun_get_jetton_data((int, slice, cell, int, int, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var $fresh$ret_6 = $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $StateInit$_get_code(($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_calculate_jetton_wallet_init($global_myAddress())));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_6);
}

((int, slice, cell, int, int, int, int, int, int, slice), slice) $JettonCore$_fun_get_wallet_address((int, slice, cell, int, int, int, int, int, int, slice) $self, slice $owner_address) impure inline_ref {
    var (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)) = $self;
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_calculate_jetton_wallet_init($owner_address);
    var $fresh$ret_7 = $global_contractAddress(($initCode'code, $initCode'data));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), $fresh$ret_7);
}

;;
;; Receivers of a Contract JettonCore
;;

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_BuyTokens((int, slice, cell, int, int, int, int, int, int, slice) $self, (slice, int) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($msg'resAddress, $msg'tonAmount) = $msg;
    $self'owner = __tact_context_get_sender();
    $self'mintable = true;
    int $price = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_getCurrentPrice();
    throw_unless(31558, ($price > 0));
    int $tokensToMint = (($msg'tonAmount * 1000000000) / $price);
    throw_unless(57646, ($tokensToMint > 0));
    throw_unless(63779, (($self'total_supply + $tokensToMint) <= $self'max_supply));
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__mint(__tact_context_get(), $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload($global_myAddress(), $msg'resAddress, $tokensToMint, null(), 0, $global_emptySlice()));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_SellTokens((int, slice, cell, int, int, int, int, int, int, slice) $self, (slice, int) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($msg'resAddress, $msg'tokenAmount) = $msg;
    throw_unless(40476, ($msg'tokenAmount > 0));
    slice $senderWalletAddress = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_get_wallet_address($msg'resAddress);
    var ($initCode'code, $initCode'data) = ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_calculate_jetton_wallet_init($msg'resAddress);
    throw_unless(24734, ( __tact_slice_eq_bits($senderWalletAddress, $global_contractAddress(($initCode'code, $initCode'data))) ));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($senderWalletAddress, 0, 64, true, $JettonBurn$_store_cell($JettonBurn$_constructor_query_id_amount_response_destination_custom_payload(0, $msg'tokenAmount, $msg'resAddress, null()))));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

((int, slice, cell, int, int, int, int, int, int, slice), ()) $JettonCore$_internal_text_8f1c98fa86a7447e3c4f639b7529f2216772d07576be8abe7f9579108d784f8e((int, slice, cell, int, int, int, int, int, int, slice) $self) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(43365, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    $self'mintable = false;
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_TransferOwnership((int, slice, cell, int, int, int, int, int, int, slice) $self, (slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($msg'newOwner) = $msg;
    throw_unless(42931, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    slice $oldOwner = $self'owner;
    $self'owner = $msg'newOwner;
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'newOwner, 0, 64, __gen_cell_comment_eb15a482c66a893b0a9bc3949142573556560952e720d3cc733a0ff4c62dc26c()));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_JettonMint((int, slice, cell, int, int, int, int, int, int, slice) $self, (slice, slice, int, cell, int, slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__mint_validate(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload));
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__mint(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'origin, $msg'receiver, $msg'amount, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_JettonBurnNotification((int, slice, cell, int, int, int, int, int, int, slice) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__burn_notification_validate(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination));
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun__burn_notification(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

(((int, slice, cell, int, int, int, int, int, int, slice)), ()) $JettonCore$_internal_binary_Deploy((int, slice, cell, int, int, int, int, int, int, slice) $self, (int) $deploy) impure inline {
    var ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool)~$JettonCore$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'total_supply, $self'owner, $self'jetton_content, $self'mintable, $self'max_supply, $self'initial_mint_amount, $self'initial_token_price, $self'curve_steepness, $self'base_amount, $self'pool), ());
}

;;
;; Get methods of a Contract JettonCore
;;

_ %getPriceForAmount(int $purchase_amount) method_id(69255) {
    int $purchase_amount = $purchase_amount;
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_getPriceForAmount($purchase_amount);
    return res;
}

_ %getTotalCostForAmount(int $purchase_amount) method_id(88150) {
    int $purchase_amount = $purchase_amount;
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_getTotalCostForAmount($purchase_amount);
    return res;
}

_ %getCurrentPrice() method_id(116589) {
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_getCurrentPrice();
    return res;
}

_ %getCurrentPrice2() method_id(119482) {
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_getCurrentPrice2();
    return res;
}

_ %getTotalSupplyInCoins() method_id(75636) {
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_getTotalSupplyInCoins();
    return res;
}

_ %get_jetton_data() method_id(106029) {
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_get_jetton_data();
    return $JettonData$_to_external(res);
}

_ %get_wallet_address(slice $owner_address) method_id(103289) {
    slice $owner_address = __tact_verify_address($owner_address);
    var self = $JettonCore$_contract_load();
    var res = self~$JettonCore$_fun_get_wallet_address($owner_address);
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract JettonCore
;;

((int, slice, cell, int, int, int, int, int, int, slice), int) $JettonCore$_contract_router_internal((int, slice, cell, int, int, int, int, int, int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive BuyTokens message
    if (op == 820359839) {
        var msg = in_msg~$BuyTokens$_load();
        self~$JettonCore$_internal_binary_BuyTokens(msg);
        return (self, true);
    }
    
    ;; Receive SellTokens message
    if (op == 2538899928) {
        var msg = in_msg~$SellTokens$_load();
        self~$JettonCore$_internal_binary_SellTokens(msg);
        return (self, true);
    }
    
    ;; Receive TransferOwnership message
    if (op == 1882669034) {
        var msg = in_msg~$TransferOwnership$_load();
        self~$JettonCore$_internal_binary_TransferOwnership(msg);
        return (self, true);
    }
    
    ;; Receive JettonMint message
    if (op == 2310479113) {
        var msg = in_msg~$JettonMint$_load();
        self~$JettonCore$_internal_binary_JettonMint(msg);
        return (self, true);
    }
    
    ;; Receive JettonBurnNotification message
    if (op == 0x7bdd97de) {
        var msg = in_msg~$JettonBurnNotification$_load();
        self~$JettonCore$_internal_binary_JettonBurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$JettonCore$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Mint:Close" message
        if (text_op == 0x8f1c98fa86a7447e3c4f639b7529f2216772d07576be8abe7f9579108d784f8e) {
            self~$JettonCore$_internal_text_8f1c98fa86a7447e3c4f639b7529f2216772d07576be8abe7f9579108d784f8e();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $JettonCore$_contract_load();
    
    ;; Handle operation
    int handled = self~$JettonCore$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $JettonCore$_contract_store(self);
}
