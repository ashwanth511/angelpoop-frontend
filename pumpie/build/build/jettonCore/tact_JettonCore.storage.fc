;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

_ $StateInit$_get_code((cell, cell) v) inline {
    var (v'code, v'data) = v;
    return v'code;
}

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body_code_data(slice $to, int $value, int $bounce, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode(slice $to, int $value, int $bounce, int $mode) inline {
    return ($bounce, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: JettonMint
;; Header: 0x89b71d09
;; TLB: jetton_mint#89b71d09 origin:address receiver:address amount:int257 custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonMint
;;

(slice, ((slice, slice, int, cell, int, slice))) $JettonMint$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2310479113);
    var v'origin = sc_0~__tact_load_address();
    var v'receiver = sc_0~__tact_load_address();
    var v'amount = sc_0~load_int(257);
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forward_ton_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'origin, v'receiver, v'amount, v'custom_payload, v'forward_ton_amount, v'forward_payload));
}

((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice $origin, slice $receiver, int $amount, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline {
    return ($origin, $receiver, $amount, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: JettonData
;; TLB: _ total_supply:int257 mintable:bool admin_address:address jetton_content:^cell jetton_wallet_code:^cell = JettonData
;;

(int, int, slice, cell, cell) $JettonData$_to_external(((int, int, slice, cell, cell)) v) inline {
    var (v'total_supply, v'mintable, v'admin_address, v'jetton_content, v'jetton_wallet_code) = v; 
    return (v'total_supply, v'mintable, v'admin_address, v'jetton_content, v'jetton_wallet_code);
}

((int, int, slice, cell, cell)) $JettonData$_constructor_total_supply_mintable_admin_address_jetton_content_jetton_wallet_code(int $total_supply, int $mintable, slice $admin_address, cell $jetton_content, cell $jetton_wallet_code) inline {
    return ($total_supply, $mintable, $admin_address, $jetton_content, $jetton_wallet_code);
}

;;
;; Type: JettonBurn
;; Header: 0x595f07bc
;; TLB: jetton_burn#595f07bc query_id:uint64 amount:coins response_destination:address custom_payload:Maybe ^cell = JettonBurn
;;

builder $JettonBurn$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'query_id, v'amount, v'response_destination, v'custom_payload) = v;
    build_0 = store_uint(build_0, 1499400124, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    return build_0;
}

cell $JettonBurn$_store_cell((int, int, slice, cell) v) inline {
    return $JettonBurn$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell)) $JettonBurn$_constructor_query_id_amount_response_destination_custom_payload(int $query_id, int $amount, slice $response_destination, cell $custom_payload) inline {
    return ($query_id, $amount, $response_destination, $custom_payload);
}

;;
;; Type: JettonInternalTransfer
;; Header: 0x178d4519
;; TLB: jetton_internal_transfer#178d4519 query_id:uint64 amount:coins from:address response_address:Maybe address forward_ton_amount:coins forward_payload:remainder<slice> = JettonInternalTransfer
;;

builder $JettonInternalTransfer$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'from, v'response_address, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = __tact_store_address_opt(build_0, v'response_address);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonInternalTransfer$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $JettonInternalTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, int, slice)) $JettonInternalTransfer$_constructor_query_id_amount_response_address_from_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $response_address, slice $from, int $forward_ton_amount, slice $forward_payload) inline {
    return ($query_id, $amount, $from, $response_address, $forward_ton_amount, $forward_payload);
}

;;
;; Type: JettonBurnNotification
;; Header: 0x7bdd97de
;; TLB: jetton_burn_notification#7bdd97de query_id:uint64 amount:coins sender:address response_destination:address = JettonBurnNotification
;;

(slice, ((int, int, slice, slice))) $JettonBurnNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2078119902);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'amount, v'sender, v'response_destination));
}

;;
;; Type: BuyTokens
;; Header: 0x30e5b29f
;; TLB: buy_tokens#30e5b29f resAddress:address tonAmount:int257 = BuyTokens
;;

(slice, ((slice, int))) $BuyTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 820359839);
    var v'resAddress = sc_0~__tact_load_address();
    var v'tonAmount = sc_0~load_int(257);
    return (sc_0, (v'resAddress, v'tonAmount));
}

;;
;; Type: SellTokens
;; Header: 0x975489d8
;; TLB: sell_tokens#975489d8 resAddress:address tokenAmount:int257 = SellTokens
;;

(slice, ((slice, int))) $SellTokens$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2538899928);
    var v'resAddress = sc_0~__tact_load_address();
    var v'tokenAmount = sc_0~load_int(257);
    return (sc_0, (v'resAddress, v'tokenAmount));
}

;;
;; Type: BurnNotificationWithTon
;; Header: 0x0b85df36
;; TLB: burn_notification_with_ton#0b85df36 amount:coins tokenAmount:coins user:address = BurnNotificationWithTon
;;

builder $BurnNotificationWithTon$_store(builder build_0, (int, int, slice) v) inline {
    var (v'amount, v'tokenAmount, v'user) = v;
    build_0 = store_uint(build_0, 193322806, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = build_0.store_coins(v'tokenAmount);
    build_0 = __tact_store_address(build_0, v'user);
    return build_0;
}

cell $BurnNotificationWithTon$_store_cell((int, int, slice) v) inline {
    return $BurnNotificationWithTon$_store(begin_cell(), v).end_cell();
}

((int, int, slice)) $BurnNotificationWithTon$_constructor_amount_tokenAmount_user(int $amount, int $tokenAmount, slice $user) inline {
    return ($amount, $tokenAmount, $user);
}

;;
;; Type: TransferOwnership
;; Header: 0x70373fea
;; TLB: transfer_ownership#70373fea newOwner:address = TransferOwnership
;;

(slice, ((slice))) $TransferOwnership$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1882669034);
    var v'newOwner = sc_0~__tact_load_address();
    return (sc_0, (v'newOwner));
}

;;
;; Type: JettonCore
;;

builder $JettonCore$_store(builder build_0, (int, slice, cell, int, int, int, int, int, int, slice) v) inline {
    var (v'total_supply, v'owner, v'jetton_content, v'mintable, v'max_supply, v'initial_mint_amount, v'initial_token_price, v'curve_steepness, v'base_amount, v'pool) = v;
    build_0 = build_0.store_coins(v'total_supply);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'jetton_content);
    build_0 = build_0.store_int(v'mintable, 1);
    build_0 = build_0.store_coins(v'max_supply);
    build_0 = build_0.store_coins(v'initial_mint_amount);
    build_0 = build_0.store_coins(v'initial_token_price);
    build_0 = build_0.store_int(v'curve_steepness, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'base_amount);
    build_1 = __tact_store_address(build_1, v'pool);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, cell, int, int, int, int, int, int, slice))) $JettonCore$_load(slice sc_0) inline {
    var v'total_supply = sc_0~load_coins();
    var v'owner = sc_0~__tact_load_address();
    var v'jetton_content = sc_0~load_ref();
    var v'mintable = sc_0~load_int(1);
    var v'max_supply = sc_0~load_coins();
    var v'initial_mint_amount = sc_0~load_coins();
    var v'initial_token_price = sc_0~load_coins();
    var v'curve_steepness = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'base_amount = sc_1~load_coins();
    var v'pool = sc_1~__tact_load_address();
    return (sc_0, (v'total_supply, v'owner, v'jetton_content, v'mintable, v'max_supply, v'initial_mint_amount, v'initial_token_price, v'curve_steepness, v'base_amount, v'pool));
}

(slice, ((slice, cell, int, int, int, slice))) $JettonCore$init$_load(slice sc_0) inline_ref {
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'max_supply = sc_0~load_int(257);
    var v'token_price = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'initial_mint = sc_1~load_int(257);
    var v'pool = sc_1~__tact_load_address();
    return (sc_0, (v'owner, v'content, v'max_supply, v'token_price, v'initial_mint, v'pool));
}

(int, slice, cell, int, int, int, int, int, int, slice) $JettonCore$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JettonCore$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $owner, cell $content, int $max_supply, int $token_price, int $initial_mint, slice $pool) = $sc~$JettonCore$init$_load();
        $sc.end_parse();
        return $JettonCore$_contract_init($owner, $content, $max_supply, $token_price, $initial_mint, $pool);
    }
}

() $JettonCore$_contract_store((int, slice, cell, int, int, int, int, int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $JettonCore$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: JettonWalletImp
;;

builder $JettonWalletImp$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'jetton_master) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'jetton_master);
    return build_0;
}

(cell, cell) $JettonWalletImp$_init_child(cell sys', slice $owner, slice $jetton_master) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: JettonWalletImp
    cell mine = __tact_dict_get_code(source, 31268);
    contracts = __tact_dict_set_code(contracts, 31268, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $JettonWalletImp$init$_store(b, ($owner, $jetton_master));
    return (mine, b.end_cell());
}